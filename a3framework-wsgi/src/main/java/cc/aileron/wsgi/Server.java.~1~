/**
 * 
 */
package cc.aileron.wsgi;

import java.net.InetSocketAddress;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import cc.aileron.generic.Resource;
import cc.aileron.generic.util.ReflectionToString;
import cc.aileron.generic.util.URLTranslator;
import cc.aileron.web.WebBinder;
import cc.aileron.web.WebBinder.Setting;
import cc.aileron.web.WebModel;
import cc.aileron.wsgi.Wsgi.Context;
import cc.aileron.wsgi.Wsgi.Method;
import cc.aileron.wsgi.Wsgi.Request;
import cc.aileron.wsgi.Wsgi.Response;

/**
 * サーバー
 */
public class Server
{
    /**
     * サーバーの文字コード
     */
    static final Charset ENCODING = Charset.forName("UTF-8");

    /**
     * メッセージリソース
     */
    static final Properties MESSAGE = Resource.Loader.get("cc/aileron/wsgi/Reason.properties")
            .toProperties();

    /**
     * ポート
     */
    static final int PORT = Integer.parseInt(System.getProperty("port", "8080"));

    /**
     * URLデコード/エンコード
     */
    static final URLTranslator URL = URLTranslator.factory.get(ENCODING);

    /**
     * @throws Exception
     */
    public static void main() throws Exception
    {
        final String dev = System.getProperty("dev", "");

        /*
         * application 起動
         */
        final WebBinder.Hier hier;
        if (dev.isEmpty())
        {
            hier = new WebModel().getContainer();
        }
        else
        {
            Resource.Loader.get(dev).toString();
            hier = new WebBinder.Hier()
            {
                @Override
                public Setting<Object> get(final Method method,
                        final String uri, final Map<String, Object> parameter)
                {

                    return null;
                }
            };
        }
        final Router router = new Router(hier);

        final ServerSocketChannel server = ServerSocketChannel.open();
        server.configureBlocking(false);
        server.socket().bind(new InetSocketAddress(8000));

        final Selector selector = Selector.open();
        server.register(selector, SelectionKey.OP_ACCEPT);
        while (selector.select() > 0)
        {
            for (final Iterator<SelectionKey> it = selector.selectedKeys()
                    .iterator(); it.hasNext();)
            {
                final SelectionKey key = it.next();
                it.remove();
                if (key.isAcceptable())
                {
                    final ServerSocketChannel channel = (ServerSocketChannel) key.channel();
                    final SocketChannel client = channel.accept();
                    client.configureBlocking(false);
                    client.register(selector, SelectionKey.OP_READ);
                }
                else if (key.isReadable())
                {
                    final SocketChannel channel = (SocketChannel) key.channel();
                    final WsgiRequest req = new WsgiRequest(channel.socket()
                            .getInetAddress(), channel);
                    final WsgiResponse res = new WsgiResponse(channel,
                            req.version);

                    try
                    {
                        router.execute(new Context()
                        {
                            @Override
                            public Request request()
                            {
                                return req;
                            }

                            @Override
                            public Response response()
                            {
                                return res;
                            }

                            @Override
                            public String toString()
                            {
                                return ReflectionToString.toString(this);
                            }
                        });
                        res.commit();
                    }
                    catch (final Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    /**
     * @param args
     */
    public static void main(final String[] args)
    {
        try
        {
            main();
        }
        catch (final Exception e)
        {
            e.printStackTrace();
        }
    }
}
